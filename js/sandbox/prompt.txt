

// index.html //
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title id="title">Studio Sandbox - Gacha Design Studio</title>
    <link rel="icon" type="image/png" href="assets/icon.png">
    <link rel="stylesheet" type="text/css" href="css/poser/studiopose.css">
</head>
<body>

    <!-- Panel atas -->
    <div class="panel1 container" id="panel1">
    </div>

    <!-- Panel bawah -->
    <div class="panel2 input-container" id="panel2">
        
<!-- Tombol arah -->
<label for="sensitivitySlider">Sensitivitas:</label>
<input type="range" id="sensitivitySlider" min="0.1" max="100" step="0.1" value="0.1" oninput="handleSensitivity(this.value)">
<input type="text" id="sensitivityInput" readonly>
<button class="button" id="move-up" onmousedown="startMove('up')" ontouchstart="startMove('up')">üîº</button>
        <button class="button" id="move-down" onmousedown="startMove('down')" ontouchstart="startMove('down')">üîΩ</button>
        <button class="button" id="move-left" onmousedown="startMove('left')" ontouchstart="startMove('left')">‚óÄÔ∏èÔ∏è</button>
        <button class="button" id="move-right" onmousedown="startMove('right')" ontouchstart="startMove('right')">‚ñ∂Ô∏èÔ∏è</button>

        <input type="file" id="imageUpload1" accept="image/*">
        <button onclick="setBackground('panel1')">Setel background panel atas</button>
        <input type="file" id="imageUpload2" accept="image/*">
        <button onclick="setBackground('panel2')">Setel background panel bawah</button>
        <label for="characterName">Nama Karakter:</label>
        <input type="text" id="characterName" oninput="handleCharacterName(this.value)">
        
        <label for="opacitySlider1">Opasitas Panel1:</label>
        <input type="range" id="opacitySlider1" class="opacitySlider" min="0" max="100" value="100" oninput="setOpacity('panel1')">
        <input type="text" id="opacityInput1" class="opacityInput" readonly>

        <label for="opacitySlider2">Opasitas Panel2:</label>
        <input type="range" id="opacitySlider2" class="opacitySlider" min="0" max="100" value="100" oninput="setOpacity('panel2')">
        <input type="text" id="opacityInput2" class="opacityInput" readonly>

        <label for="layerName">Lapisan:</label>
        <input type="text" id="layerName" oninput="handleLayerName(this.value)">
        <label for="xCoord">Posisi X:</label>
        <input type="text" id="xCoord" oninput="handleXCoord(this.value)">
        <label for="yCoord">Posisi Y:</label>
        <input type="text" id="yCoord" oninput="handleYCoord(this.value)">
        <label for="width">Lebar:</label>
        <input type="text" id="width" placeholder="Lebar">
        <label for="height">Tinggi:</label>
        <input type="text" id="height" placeholder="Tinggi">
        <label for="zoom">Zoom:</label>
        <input type="text" id="zoom" oninput="handleZoom(this.value)">
        <label for="flipHorizontal">Flip Horizontal:</label>
        <input type="checkbox" id="flipHorizontal" onchange="handleFlipHorizontal(this.checked)">
        <label for="flipVertical">Flip Vertikal:</label>
        <input type="checkbox" id="flipVertical" onchange="handleFlipVertical(this.checked)">
        <br>
        <label for="rotationControl">Rotasi:</label>
        <input type="range" id="rotationControl" min="0" max="360" value="0" oninput="handleRotation(this.value)">
        <div id="rotationIndicator">0</div>
        <button onclick="moveLayerUp()">Naikkan</button>
        <button onclick="moveLayerDown()">Turunkan</button>
        <button onclick="exportAsSVG()">Ekspor sebagai SVG</button>
        <input type="text" id="svgFileName" placeholder="Nama file SVG">
        <button onclick="exportAsHTML()">Ekspor sebagai HTML</button>
        <input type="text" id="htmlFileName" placeholder="Nama file HTML">

        <br>
        <button id="toggleSelectorBtn" onclick="toggleSelector()">Nyalakan Seleksi</button>
        <button id="groupBtn" onclick="groupSelectedLayers()">Grupkan</button>
        <button id="ungroupBtn" onclick="ungroupSelectedLayers()">Pisahkan</button>
        <button id="deleteBtn" onclick="deleteSelectedLayer()">Hapus Lapisan</button>
        
        <input type="file" id="svgUpload" accept=".svg" style="display:none" onchange="addSVG(event)">
        <button onclick="document.getElementById('svgUpload').click()">Tambahkan SVG</button>
        <input type="file" id="imageUpload" accept="image/*" style="display:none" onchange="addImage(event)">
        <button onclick="document.getElementById('imageUpload').click()">Tambahkan Sisipan</button>
        
    </div>

    <!-- Garis splitter -->
    <div id="splitter"></div>

    <!-- Skrip -->
    <script src="js/poser/layer.js"></script>
    <script src="js/poser/studiopose.js"></script>
    <script src="js/poser/splitter.js"></script>
    <script src="js/poser/background.js"></script>
    <script src="js/poser/opacity.js"></script>
    <script src="js/poser/selector.js"></script>
    <script src="js/poser/key.js"></script>
    <script src="js/poser/sensivity.js"></script>
    <script src="js/poser/upload.js"></script>
    <!-- Skrip -->

</body>
</html>
// background.js //
function setBackground(panelId) {
    const fileInput = document.getElementById(panelId === 'panel1' ? 'imageUpload1' : 'imageUpload2');
    const file = fileInput.files[0];
    const reader = new FileReader();

    reader.onload = function(e) {
        const panel = document.getElementById(panelId);
        panel.style.backgroundImage = `url('${e.target.result}')`;
        saveConfig(panelId, e.target.result);
    }

    reader.readAsDataURL(file);
}

function saveConfig(panelId, imageUrl) {
    const config = {
        panelId: panelId,
        imageUrl: imageUrl
    };

    // Simpan konfigurasi ke file JSON
    const jsonConfig = JSON.stringify(config);
    localStorage.setItem('backgroundConfig', jsonConfig);

    // Salin file gambar ke folder cache
    const filename = imageUrl.split('/').pop();
    const cacheFolder = '../.cache/';
    fetch(imageUrl)
        .then(response => response.blob())
        .then(blob => {
            const formData = new FormData();
            formData.append('file', blob, filename);
            fetch(cacheFolder + filename, {
                method: 'POST',
                body: formData
            });
        });

}

// Memeriksa jika ada konfigurasi latar belakang yang tersimpan
document.addEventListener('DOMContentLoaded', function() {
    const jsonConfig = localStorage.getItem('backgroundConfig');
    if (jsonConfig) {
        const config = JSON.parse(jsonConfig);
        const panel = document.getElementById(config.panelId);
        panel.style.backgroundImage = `url('${config.imageUrl}')`;
    }
});
// studiopose.js //

/** @type {Layer} Elemen yang sedang dipilih */
let selected = null;

const layers = [
    // lapisan //
    // Tangan kanan
    new Layer('Lengan atas kanan', 'assets/arm1.svg', 'assets/arm2.svg', {flipX: true}),
    new Layer('Lengan bawah kanan', 'assets/hand1.svg', 'assets/hand2.svg', {flipX: true}),
    new Layer('Tangan kanan', 'assets/finger3.svg', 'assets/finger4.svg', {flipX: true}),
    // Kaki kanan
    new Layer('Paha atas kanan', 'assets/leg1.svg', 'assets/leg2.svg', {flipX: true}),
    new Layer('Kaki kanan', 'assets/foot1.svg', 'assets/foot2.svg', {flipX: true}),
    // Kepala dan badan
    new Layer('Badan', 'assets/body1.svg', 'assets/body2.svg'),
    new Layer('Kepala', 'assets/head1.svg', 'assets/head2.svg'),
    // Tangan kiri
    new Layer('Lengan atas kiri', 'assets/arm1.svg', 'assets/arm2.svg'),
    new Layer('Lengan bawah kiri', 'assets/hand1.svg', 'assets/hand2.svg'),
    new Layer('Tangan kiri', 'assets/finger1.svg', 'assets/finger2.svg'),
    // Kaki kiri
    new Layer('Paha atas kiri', 'assets/leg1.svg', 'assets/leg2.svg'),
    new Layer('Kaki kiri', 'assets/foot1.svg', 'assets/foot2.svg'),
    // lapisan //
];

/** 
 * Mendefinisikan koordinat awal ketika halaman dimuat 
 */
let initialX = 0;
let initialY = 0;

/** 
 * Mendapatkan elemen input untuk menampilkan dan mengubah koordinat 
 */
const xCoordInput = document.getElementById('xCoord');
const yCoordInput = document.getElementById('yCoord');
const heightInput = document.getElementById('height');
const widthInput = document.getElementById('width');
const zoomInput = document.getElementById('zoom');
const layerNameInput = document.getElementById('layerName');
const rotationControl = document.getElementById('rotationControl');
const flipHorizontal = document.getElementById('flipHorizontal');
const flipVertical = document.getElementById('flipVertical');
const rotationIndicator = document.getElementById('rotationIndicator');
const splitter = document.getElementById('splitter');
const panel1 = document.getElementById('panel1');
const panel2 = document.getElementById('panel2');
const splitterHeight = splitter.offsetHeight;

/**
 * @param {Event} e
 * @param {Layer} layer 
 */
function onlayerdragstart(e, layer) {
    // Mendapatkan koordinat awal mouse/jari
    if(e.targetTouches) {
        initialX = e.targetTouches[0].clientX;
        initialY = e.targetTouches[0].clientY;
    } else {
        initialX = e.clientX;
        initialY = e.clientY;
    }

    // Menandai layer yang dipilih
    selectLayer(layer);

    // Menambahkan event listener untuk mengikuti pergerakan mouse/jari
    document.addEventListener('mousemove', onlayerdrag);
    document.addEventListener('mouseup', onlayerdragend);
    document.addEventListener('touchmove', onlayerdrag);
    document.addEventListener('touchend', onlayerdragend);
}

function onlayerdrag(e) {
    // Koordinat mouse/jari
    let px, py;
    if(e.targetTouches) {
        px = e.targetTouches[0].clientX;
        py = e.targetTouches[0].clientY;
    } else {
        px = e.clientX;
        py = e.clientY;
    }

    let dx = px - initialX;
    let dy = py - initialY;

    // Memperbarui koordinat elemen gambar
    selected.x += dx;
    selected.y += dy;

    updateCoordInput();

    // Memperbarui koordinat awal mouse
    initialX = px;
    initialY = py;
}

function onlayerdragend(e) {
    // Menghapus event listener setelah selesai drag
    document.removeEventListener('mousemove', onlayerdrag);
    document.removeEventListener('mouseup', onlayerdragend);
    document.removeEventListener('touchmove', onlayerdrag);
    document.removeEventListener('touchend', onlayerdragend);
}


// Menambahkan event listener untuk mengatur perpindahan menggunakan keyboard
document.addEventListener('keydown', function(e) {
    if(!selected) return;

    // Mengatur sensitivitas perpindahan
//    let sensitivity = 1;

    // Menangani perpindahan menggunakan keyboard
    switch(e.key) {
        case 'ArrowUp':
            selected.y -= sensitivity;
            updateCoordInput();
            break;
        case 'ArrowDown':
            selected.y += sensitivity;
            updateCoordInput();
            break;
        case 'ArrowLeft':
            selected.x -= sensitivity;
            updateCoordInput();
            break;
        case 'ArrowRight':
            selected.x += sensitivity;
            updateCoordInput();
            break;
    }
});


document.addEventListener('DOMContentLoaded', function() {
    // Pasang layer ke container ketika halaman selesai dimuat
    const container = document.querySelector('.container');
    for(const layer of layers) {
        layer.attach(container, onlayerdragstart);
    }

    // Hapus seleksi ketika user mengklik elemen yang bukan layer
    document.addEventListener('click', function(e) {
        if(e.target.tagName !== 'HTML') {
            return;
        }
        deselectLayer();
    });
});

/**
 * Panggil fungsi ini saat objek dipilih
 * @param {Layer} layer 
 */
function selectLayer(layer) {
    if(selected) {
        selected.selected = false;
    }

    layer.selected = true;
    selected = layer;
    updateCoordInput();
    widthInput.value = selected.element.clientWidth;
    heightInput.value = selected.element.clientHeight;
    layerNameInput.value = selected.name;
    rotationControl.value = selected.rotation;
    flipHorizontal.checked = selected.isFlipX;
    flipVertical.checked = selected.isFlipY;
    rotationIndicator.innerText = selected.rotation;
}

// Panggil fungsi ini saat objek tidak dipilih lagi
function deselectLayer() {
    if(!selected) return;
    selected.selected = false;
    selected = null;
}

function handleLayerName(value) {
    selected.name = value;
}

function updateCoordInput() {
    xCoordInput.value = selected.x;
    yCoordInput.value = selected.y;
}

function handleXCoord(value) {
    if(!selected) return;
    selected.x = parseFloat(value);
};

function handleYCoord(value) {
    if(!selected) return;
    selected.y = parseFloat(value);
};

function handleRotation(value) {
    if(!selected) return;
    selected.rotation = parseFloat(value);
    rotationIndicator.innerText = value;
}

function handleZoom(value) {
    if(!selected) return;
    selected.scale = value;
}

function handleFlipHorizontal(value) {
    if(!selected) return;
    selected.flipX = value;
}

function handleFlipVertical(value) {
    if(!selected) return;
    selected.flipY = value;
}

function moveLayerUp() {
    if (!selected) return;
    const currentIndex = layers.indexOf(selected);
    if (currentIndex < layers.length - 1) {
        const temp = layers[currentIndex];
        layers[currentIndex] = layers[currentIndex + 1];
        layers[currentIndex + 1] = temp;
        renderLayers();
    }
}

function moveLayerDown() {
    if (!selected) return;
    const currentIndex = layers.indexOf(selected);
    if (currentIndex > 0) {
        const temp = layers[currentIndex];
        layers[currentIndex] = layers[currentIndex - 1];
        layers[currentIndex - 1] = temp;
        renderLayers();
    }
}

function renderLayers() {
    const container = document.querySelector('.container');
    container.innerHTML = '';
    for (const layer of layers) {
        layer.attach(container, onlayerdragstart);
    }
}

function handleCharacterName() {
    var newTitle = document.getElementById('characterName').value;
    const gachaStudio = "Studio Sandbox - ";
    document.getElementById('title').innerText = gachaStudio + newTitle;
}

// test //
function addSVG(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const layer = new Layer(file.name, e.target.result, null, {x: 0, y: 0});
            layers.push(layer);
            layer.attach(document.querySelector('.container'), onlayerdragstart);
        };
        reader.readAsDataURL(file);
    }
}

function addImage(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const layer = new Layer(file.name, e.target.result, null, {x: 0, y: 0});
            layers.push(layer);
            layer.attach(document.querySelector('.container'), onlayerdragstart);
        };
        reader.readAsDataURL(file);
    }
}

// Fungsi untuk menangani drag and drop
function handleDrop(e) {
    e.preventDefault();
    const files = e.dataTransfer.files;
    for (const file of files) {
        const reader = new FileReader();
        reader.onload = function(event) {
            const layer = new Layer(file.name, event.target.result, null, {x: 0, y: 0});
            layers.push(layer);
            layer.attach(document.querySelector('.container'), onlayerdragstart);
        };
        reader.readAsDataURL(file);
    }
}

function handleDragOver(e) {
    e.preventDefault();
}

document.addEventListener('DOMContentLoaded', function() {
    // Existing code to attach layers
    //...
    // Add drag and drop event listeners
    const container = document.querySelector('.container');
    container.addEventListener('dragover', handleDragOver);
    container.addEventListener('drop', handleDrop);
});

function groupLayers() {
    const groupName = prompt('Nama grup:');
    if (groupName) {
        layers.forEach(layer => {
            if (layer.selected) {
                layer.group = groupName;
            }
        });
    }
}

function ungroupLayers() {
    layers.forEach(layer => {
        if (layer.selected) {
            layer.group = null;
        }
    });
}

function deleteLayer() {
    const selectedLayers = layers.filter(layer => layer.selected);
    selectedLayers.forEach(layer => {
        layer.element.remove();
        const index = layers.indexOf(layer);
        if (index > -1) {
            layers.splice(index, 1);
        }
    });
}

function changeLayerColor(color) {
    const groupName = prompt('Nama grup:');
    if (groupName) {
        layers.forEach(layer => {
            if (layer.group === groupName) {
                layer.setColor(color);
            }
        });
    }
}
// opacity.js //
function setBackground(panelId) {
    const fileInput = document.getElementById(panelId === 'panel1' ? 'imageUpload1' : 'imageUpload2');
    const file = fileInput.files[0];
    const reader = new FileReader();

    reader.onload = function(e) {
        const panel = document.getElementById(panelId);
        panel.style.backgroundImage = `url('${e.target.result}')`;
    }

    reader.readAsDataURL(file);
}

function setOpacity(panelId) {
    const opacitySlider = document.getElementById(panelId === 'panel1' ? 'opacitySlider1' : 'opacitySlider2');
    const opacityInput = document.getElementById(panelId === 'panel1' ? 'opacityInput1' : 'opacityInput2');
    const panel = document.getElementById(panelId);

    panel.style.opacity = opacitySlider.value / 100;
    opacityInput.value = opacitySlider.value + '%';
}
// key.js //
let interval;

function updateCoordInput() {
    document.getElementById('xCoord').value = selected.x;
    document.getElementById('yCoord').value = selected.y;
}

function moveLayer(direction) {
    if (!selected) return;

    switch (direction) {
        case 'up':
            selected.y -= sensitivity;
            break;
        case 'down':
            selected.y += sensitivity;
            break;
        case 'left':
            selected.x -= sensitivity;
            break;
        case 'right':
            selected.x += sensitivity;
            break;
    }
    updateCoordInput();
}

function startMove(direction) {
    moveLayer(direction);
    interval = setInterval(() => moveLayer(direction), 0.1);
}

function stopMove() {
    clearInterval(interval);
}

document.addEventListener('mouseup', stopMove);
document.addEventListener('touchend', stopMove);
document.addEventListener('touchcancel', stopMove);
// upload.js //
// export.js //
// splitter.js //
// Pilih elemen container
const container = document.querySelector('.container');

// Tambahkan CSS ke elemen container
container.style.width = '100%';
container.style.backgroundColor = 'white';
container.style.overflow = 'auto';

function resizePanel(pointerY) {
    let newHeight = (pointerY - splitterHeight / 2) / window.innerHeight * 100;
    // Batasi tinggi agar tidak melewati batas atas (0%) atau batas bawah (100%)
    newHeight = Math.min(Math.max(newHeight, 0), 100 - splitterHeight / window.innerHeight * 100);
    // Atur posisi splitter dan tinggi panel 2
    splitter.style.top = newHeight + '%';
    panel2.style.height = (100 - newHeight - splitterHeight / window.innerHeight * 100) + '%';
}

/** 
 * @param {MouseEvent} e 
 */
function onMouseMove(e) {
    if (!isDragging) return;
    resizePanel(e.clientY);
}

/** 
 * @param {TouchEvent} e 
 */
function onTouchMove(e) {
    if (!isDragging) return;
    resizePanel(e.touches[0].clientY);
}

/** 
 * @param {MouseEvent} e 
 */
function onMouseUp(e) {
    isDragging = false;
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
}

/** 
 * @param {MouseEvent} e 
 */
function onMouseDown(e) {
    isDragging = true;
    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
}

/**
 * @param {TouchEvent} e 
 */
function onTouchEnd(e) {
    isDragging = false;
    document.removeEventListener('touchmove', onTouchMove);
    document.removeEventListener('touchend', onTouchEnd);
}

// Event listener untuk mengatur perangkat sentuh
splitter.addEventListener('touchstart', function(e) {
    isDragging = true;
    document.addEventListener('touchmove', onTouchMove);
    document.addEventListener('touchend', onTouchEnd);
});

// Event listener untuk perangkat sentuh
splitter.addEventListener('mousedown', onMouseDown);

resizePanel(window.innerHeight *0.9);

// sensivity.js //
let sensitivity = 0.1 // Nilai awal untuk sensitivitas

function handleSensitivity(value) {
    sensitivity = parseFloat(value);
    document.getElementById('sensitivityInput').value = sensitivity;
}

// selector.js //
// Selector.js
document.addEventListener('DOMContentLoaded', function() {
  const container = document.getElementById('panel1'); // Ganti dengan id panel karakter svg
  const toggleSelectorBtn = document.getElementById('toggleSelectorBtn');
  let startX, startY, isDragging = false;
  let selectorActive = false;
  let selectedLayers = [];
  const selectionBox = document.createElement('div');
  selectionBox.className = 'selection-box';
  container.appendChild(selectionBox);

  function setSelectionBox(x, y, w, h) {
      selectionBox.style.left = x + 'px';
      selectionBox.style.top = y + 'px';
      selectionBox.style.width = Math.abs(w) + 'px';
      selectionBox.style.height = Math.abs(h) + 'px';

      // Flip the box if necessary
      if (w < 0) {
          selectionBox.style.left = (x + w) + 'px';
      }
      if (h < 0) {
          selectionBox.style.top = (y + h) + 'px';
      }
  }

  function clearSelectionBox() {
      selectionBox.style.width = '0px';
      selectionBox.style.height = '0px';
  }

  function toggleSelector() {
      selectorActive = !selectorActive;
      if (selectorActive) {
          toggleSelectorBtn.textContent = "Matikan Seleksi";
      } else {
          toggleSelectorBtn.textContent = "Nyalakan Seleksi";
          clearSelectionBox();
      }
  }

  function selectLayersInBox(box) {
      selectedLayers = [];
      const layers = document.querySelectorAll('.layer');
      layers.forEach(layer => {
          const layerRect = layer.getBoundingClientRect();
          if (box.left <= layerRect.right && box.right >= layerRect.left && 
              box.top <= layerRect.bottom && box.bottom >= layerRect.top) {
              layer.classList.add('selected');
              selectedLayers.push(layer);
          }
      });
  }

  function deselectAllLayers() {
      selectedLayers.forEach(layer => {
          layer.classList.remove('selected');
      });
      selectedLayers = [];
  }

  function moveSelectedLayers(dx, dy) {
      selectedLayers.forEach(layer => {
          const layerRect = layer.getBoundingClientRect();
          layer.style.left = layerRect.left + dx + 'px';
          layer.style.top = layerRect.top + dy + 'px';
      });
  }

  container.addEventListener('mousedown', function(e) {
      if (!selectorActive) return;
      startX = e.clientX;
      startY = e.clientY;
      isDragging = true;
      clearSelectionBox();
      deselectAllLayers();
  });

  container.addEventListener('mousemove', function(e) {
      if (!selectorActive || !isDragging) return;
      const currentX = e.clientX;
      const currentY = e.clientY;
      const width = currentX - startX;
      const height = currentY - startY;
      setSelectionBox(startX, startY, width, height);
  });

  container.addEventListener('mouseup', function(e) {
      if (!selectorActive || !isDragging) return;
      isDragging = false;
      const box = selectionBox.getBoundingClientRect();
      selectLayersInBox(box);
      clearSelectionBox();
  });

  // Touch events
  container.addEventListener('touchstart', function(e) {
      if (!selectorActive) return;
      const touch = e.touches[0];
      startX = touch.clientX;
      startY = touch.clientY;
      isDragging = true;
      clearSelectionBox();
      deselectAllLayers();
  }, {passive: true});

  container.addEventListener('touchmove', function(e) {
      if (!selectorActive || !isDragging) return;
      const touch = e.touches[0];
      const currentX = touch.clientX;
      const currentY = touch.clientY;
      const width = currentX - startX;
      const height = currentY - startY;
      setSelectionBox(startX, startY, width, height);
      e.preventDefault();
  }, {passive: false});

  container.addEventListener('touchend', function(e) {
      if (!selectorActive || !isDragging) return;
      isDragging = false;
      const box = selectionBox.getBoundingClientRect();
      selectLayersInBox(box);
      clearSelectionBox();
  });

  // Keyboard events
  document.addEventListener('keydown', function(e) {
      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
          if (!selectedLayers.length) return;
          const dx = e.key === 'ArrowRight' ? 1 : e.key === 'ArrowLeft' ? -1 : 0;
          const dy = e.key === 'ArrowDown' ? 1 : e.key === 'ArrowUp' ? -1 : 0;
          moveSelectedLayers(dx, dy);
      }
  });

  toggleSelectorBtn.addEventListener('click', toggleSelector);
});

// layer.js //
class Layer {
    #name = null;
    #x = 0;
    #y = 0;
    #rotation = 0;
    #scale = 1;
    #flipX = false;
    #flipY = false;
    #images = {};
    #ondragstart = null;
    #color = '#ffffff';
    #group = null;
    #element = null;

    constructor(name, baseImage, trimImage, shape1Image, shape2Image, shape3Image, shape4Image, shape5Image, shadeImage, lightImage, outlineImage, initial = {}) {
        this.#name = name;
        this.#images = {
            base: baseImage,
            trim: trimImage,
            shape1: shape1Image,
            shape2: shape2Image,
            shape3: shape3Image,
            shape4: shape4Image,
            shape5: shape5Image,
            shade: shadeImage,
            light: lightImage,
            outline: outlineImage
        };
        this.#initElement();

        if ('x' in initial) this.#x = initial.x;
        if ('y' in initial) this.#y = initial.y;
        if ('rotation' in initial) this.#rotation = initial.rotation;
        if ('scale' in initial) this.#scale = initial.scale;
        if ('flipX' in initial) this.#flipX = initial.flipX;
        if ('flipY' in initial) this.#flipY = initial.flipY;
        if ('color' in initial) this.#color = initial.color;
        if ('group' in initial) this.#group = initial.group;
        this.#updateElement();
    }

    #initElement() {
        this.#element = document.createElement('div');
        this.#element.classList.add('layer');

        for (const [key, src] of Object.entries(this.#images)) {
            const imgElement = document.createElement('img');
            imgElement.src = src;
            imgElement.alt=key;
            imgElement.classList.add(key);
            this.#element.appendChild(imgElement);
        }

        for (const el of [this.#element, ...this.#element.querySelectorAll('img')]) {
            el.draggable = false;
        }

        this.#element.addEventListener('click', () => this.select());
    }

    #updateElement() {
        this.#element.style.transform = `translate(${this.#x}px, ${this.#y}px) scale(${this.#scale}) rotate(${this.#rotation}deg)`;
        if (this.#flipX) this.#element.style.transform += ' scaleX(-1)';
        if (this.#flipY) this.#element.style.transform += ' scaleY(-1)';
        for (const img of this.#element.querySelectorAll('img')) {
            img.style.filter = `drop-shadow(0 0 0 ${this.#color})`;
        }
    }

    setColor(color) {
        this.#color = color;
        this.#updateElement();
    }

    get name() {
        return this.#name;
    }

    get x() {
        return this.#x;
    }

    get y() {
        return this.#y;
    }

    get rotation() {
        return this.#rotation;
    }

    get scale() {
        return this.#scale;
    }

    get isFlipX() {
        return this.#flipX;
    }

    get isFlipY() {
        return this.#flipY;
    }

    set name(name) {
        this.#name = name;
    }

    set x(value) {
        this.#x = value;
        this.#updateElement();
    }

    set y(value) {
        this.#y = value;
        this.#updateElement();
    }

    set rotation(value) {
        this.#rotation = value;
        this.#updateElement();
    }

    set scale(value) {
        this.#scale = value;
        this.#updateElement();
    }

    set flipX(value) {
        this.#flipX = value;
        this.#updateElement();
    }

    set flipY(value) {
        this.#flipY = value;
        this.#updateElement();
    }

    /*
    #updateElement() {
        this.element.style.left = this.#x + 'px';
        this.element.style.top = this.#y + 'px';
        const transforms = [
            `rotate(${this.#rotation}deg)`,
            `scale(${this.#scale})`,
        ];
        if(this.#flipX) transforms.push('scaleX(-1)');
        if(this.#flipY) transforms.push('scaleY(-1)');
        this.element.style.transform = transforms.join(' ');
    }
    */

    /**
     * @param {boolean} selected
     */
    set selected(selected) {
        if(selected) {
            this.element.classList.add('selected');
        } else {
            this.element.classList.remove('selected');
        }
    }

    /**
     * @param {HTMLElement} dstRoot
     */
    attach(dstRoot, ondragstart) {
        dstRoot.appendChild(this.element);
        this.#ondragstart = (e) => {
            ondragstart(e, this);
        };

        this.element.addEventListener('mousedown', this.#ondragstart);
        this.element.addEventListener('touchstart', this.#ondragstart);
    }

    detach() {
        this.element.parentElement.removeChild(this.element);
        this.element.removeEventListener('mousedown', this.#ondragstart);
        this.element.removeEventListener('touchstart', this.#ondragstart);
    }
}

// group.js //
isikan fungsi pengrup kan layer
// delete.js //
isikan fungsi hapus layer
// color.js //
isikan fungsi agar layer bisa berganti warna sesuai setelan
// colorpicker.js //
isikan fungsi pengambilan warna
// colorpallet.js //
isikan fungsi pemakaian warna di pallet yang di konfigurasikan